**************************************************************************/
/*!
    @file     main_carte.cpp
    @author   Bruno Moreira Nabinger et Corentin Lepais (EPSA)
                                                  Ecurie Piston Sport Auto
    
    Main code for control the Motor with integrated Controller and CAN 
    interface BG 45 CI

 
    @section  HISTORY
 
    v0.2 - Rewrote driver for Adafruit_Sensor and Auto-Gain support, and
           added lux clipping check (returns 0 lux on sensor saturation)
    
    v0.1 - 10/10/2018 First release ()
*/
/**************************************************************************/

//initialisation Canbus
#include <SPI.h>
#include "mcp_can.h"
MCP_CAN CAN(53);


//--------------  assignation des pins  ------------------
/* PIN Mapping    
     ====================================================================
     PIN  Symbol    Description                                   Default
     ---  ------    --------------------------------------------- -------
      22  GND                                                     -       
      21  AREF      Analog Reference for the analog inputs        -           
      20  GND                                                     -       
     A13  SCK       Serial Clock - The clock pulses which         -       
                     synchronize data transmission generated by          
                     the master                                          
     A12  MISO      Master In Slave Out - The Slave line for      -      
                     sending data to the master                          
     A11  MOSI      Master Out Slave In - The Master line for     -      
                     sending data to the peripherals,                    
     A10  CS        Chip Select for CAN Controller with SPI       -      
                     Interface  (CANdiy-Shield)                          
       8  GND                                                            
       7  VCC                                                            
       1  RESET     Reset                                                 
                                                                         
      DISPONIBLE
      15  motorSTATE0  Motor State 0 (Error,Stop,Moving)         Digital INPUT
      14  motorSTATE1  Motor State 1 (Error,Stop,Moving)         Digital INPUT
       9  motorInput0  Motor Input 0                            Digital OUTPUT
       8  motorInput1  Motor Input 1                            Digital OUTPUT
       7  motorInput2  Motor Input 2                            Digital OUTPUT
       6  motorInput3  Motor Input 3                            Digital OUTPUT
       5  motorInput4  Motor Input 4                            Digital OUTPUT
       4  shiftCut     Cut the injection                        Digital OUTPUT
       3  shiftPot     Inform Gear (Digital PWM)                 Analog OUTPUT
       1  paletteIncrease Pallete for increasing the speed       Digital INPUT
       0  paletteDencrease Pallete for increasing the speed      Digital INPUT


                                                                           */
const int motorState0 = 15;//A1
const int motorState1 = 14;//A0
const int motorInput0 = 9;
const int motorInput1 = 8;
const int motorInput2 = 7;
const int motorInput3 = 6;
const int motorInput4 = 5;
const int shiftCut = 4; 
const int shiftPot = 3;
const int paletteIncrease = 1;
const int paletteDecrease = 0;

void setup() 
{ //Setup code here, (run once)

  pinMode(motorState0, INPUT);
  pinMode(motorState1, INPUT);
  pinMode(motorInput0, OUTPUT);
  pinMode(motorInput1, OUTPUT);
  pinMode(motorInput2, OUTPUT);
  pinMode(motorInput3, OUTPUT);
  pinMode(motorInput4, OUTPUT);
  pinMode(shiftCut, OUTPUT); 
  pinMode(shiftPot, INPUT);

  pinMode(paletteIncrease, INPUT_PULLUP);
  pinMode(paletteDecrease, INPUT_PULLUP);

  digitalWrite(motorInput0, LOW);
  digitalWrite(motorInput1, LOW);
  digitalWrite(motorInput2, LOW);
  digitalWrite(motorInput3, LOW);
  digitalWrite(motorInput4, LOW);
  digitalWrite(shiftCut, HIGH);

}

void loop() 
{ // Main code here, (run repeatedly)

}
